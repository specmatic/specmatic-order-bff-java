import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.springframework.boot' version '3.5.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.2.20'
    id 'jacoco'
}

repositories {
    maven {
        url "https://repo.specmatic.io/releases"
    }
    maven {
        url "https://packages.confluent.io/maven/"
    }
    mavenCentral()
    mavenLocal()
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
        compilerOptions.languageVersion.set(KotlinVersion.KOTLIN_2_1)
        compilerOptions.apiVersion.set(KotlinVersion.KOTLIN_2_1)
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        csv.required = true
    }
}

def specmaticVersion = project.property("specmaticVersion")
def specmaticKafkaVersion = project.property("specmaticKafkaVersion")

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.5.0')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.kafka:kafka-clients:3.7.0'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testApi "io.specmatic:junit5-support:$specmaticVersion"
    testImplementation("io.specmatic.async:specmatic-kafka:$specmaticKafkaVersion") {
        exclude group: 'io.specmatic.async', module: 'specmatic-async-core'
    }
    testImplementation("io.specmatic.async:specmatic-async-core-min:$specmaticKafkaVersion")
    testImplementation(
            'org.assertj:assertj-core:3.27.4',
            'org.junit.jupiter:junit-jupiter-api:5.13.4'
    )
    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.4'
}

test {
    useJUnitPlatform {
        includeEngines("junit-jupiter")
    }
    testLogging.showStandardStreams = true

    afterSuite { desc, result ->
        if (!desc.parent) {
            def resultLine = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def lineLength = resultLine.length()
            def separator = "-" * lineLength

            println separator
            println resultLine
            println separator
        }
    }

}

group = 'io.specmatic.sample'
version = '1.0-SNAPSHOT'
sourceCompatibility = '17'

bootJar {
    archiveClassifier = "all"
    version = ""
}
