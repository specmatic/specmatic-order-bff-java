name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: contracts changed
jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        java: [17]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}

    - name: Build BFF project with Gradle
      run: ./gradlew build

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # Convert JUnit XML to CTRF format
    - name: Convert JUnit to CTRF
      if: always() # Run even if tests fail
      run: |
        npx junit-to-ctrf build/test-results/test/TEST-com.component.orders.contract.ContractTests.xml --output ctrf/ctrf-report.json

    # Upload CTRF JSON report as artifact
    - name: Upload CTRF Report
      uses: actions/upload-artifact@v4
      if: always() # Run even if tests fail
      with:
        name: ctrf-report
        path: ctrf/*.json
        retention-days: 5
    
    # Display CTRF test results
    - name: Publish Test Results
      uses: ctrf-io/github-test-reporter@v1
      if: always() # Run even if tests fail
      with:
        report-path: './ctrf/*.json'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run coverage report
      run: ./gradlew jacocoTestReport

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv

    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

    - name: Run Specmatic Insights Github Build Reporter
      uses: specmatic/specmatic-insights-build-reporter-github-action@v2.1.0
      with:
        org-id: ${{ secrets.SPECMATIC_ORG_ID }}
        branch-name: ${{ github.ref_name }}
        repo-name: ${{ github.event.repository.name }}
        repo-id: ${{ github.repository_id }}
        repo-url: ${{ github.event.repository.html_url }}

    - name: Upload HTML Test Report
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.java }}-html-report
        path: build/reports/specmatic/html

    - name: Upload build/libs for Docker
      uses: actions/upload-artifact@v4
      with:
        name: build-libs
        path: build/libs

  docker:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build/libs from build job
        uses: actions/download-artifact@v4
        with:
          name: build-libs
          path: build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        run: echo ${{ secrets.SPECMATIC_DOCKER_HUB_TOKEN }} | docker login -u ${{ vars.SPECMATIC_DOCKER_HUB_USERNAME }} --password-stdin

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}

      - name: Build and push Docker image (multi-platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ github.repository }}:latest
          labels: ${{ steps.meta.outputs.labels }}
